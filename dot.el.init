;;; package --- Summary
;;; Commentary:
;;; TODO:
;;;   Investigate FlyCheck
;;;   Add support for Python
;;;   Add support for Go
;;;   Add support for Typescript
(setq user-full-name "Ugo Matrangolo")
(setq user-mail-address "ugo.matrangolo@gmail.com")

(setq-default indent-tabs-mode nil)     ;; use always spaces
(setq-default truncate-lines 1)         ;; do not truncate lines
(setq tab-width 2 indent-tabs-mode nil) ;; no tabs, only 2 spaces for indentation
(setq make-backup-files nil)            ;; no bkp files
(show-paren-mode t)                     ;; highlight parens

(add-hook 'before-save-hook 'delete-trailing-whitespace)  ;; remove trailing whitespaces on saving

;; force UTF-8
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

(setq backup-directory-alist `(("." . "~/.saves")))    ;; Put all bkps in ~/.saves
(setq-default case-fold-search nil)                    ;; Turn on case sensitive mode

(require 'package)

;; Add melpa to your packages repositories
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

;; Require company for completion at a point
;; see: https://company-mode.github.io
(require 'company)
(add-hook 'after-init-hook 'global-company-mode) ;; make sure to start init everywhere

;; Require eldoc-box to show docs in a child frame in the GUI version of emacs.
(require 'eldoc-box)
(add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t) ;; use eldoc-box with eglot

;; Enable defer and ensure by default for use-package
;; Keep auto-save/backup files separate from source code:  https://github.com/scalameta/metals/issues/1027
(setq use-package-always-defer t
      use-package-always-ensure t
      backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

;; Use FlyCheck for rendering diagnostics and compile errors.
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; Set IDO mode everywhere
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)

;; Magit: https://magit.vc
(require 'magit)

;; Configs for GUI mode
(when window-system
  (set-frame-size (selected-frame) 150 69)
  (global-hl-line-mode 1) ;; hilight current line
  (set-face-background 'hl-line "yellow")
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

;; Configure Metals for Scala
;; Enable scala-ts-mode and sbt-mode
(use-package scala-ts-mode
  :interpreter ("scala" . scala-ts-mode))

;; Enable sbt mode for executing sbt commands
(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false")))

;; Setup for Org mode
(require 'org)

;; Optional: install eglot-format-buffer as a save hook.
;; The depth of -10 places this before eglot's willSave notification,
;; so that that notification reports the actual contents that will be saved.
(defun eglot-format-buffer-before-save ()
  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))
(add-hook 'go-ts-mode-hook #'eglot-format-buffer-before-save)

;; Format imports before saving iff in eglot mode
(add-hook 'before-save-hook
    (lambda ()
        (call-interactively 'eglot-code-action-organize-imports)
        (call-interactively 'eglot-format))
    nil t)

;; Add metals for the scala-ts-mode major mode
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(scala-ts-mode . ("metals"))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("4c7228157ba3a48c288ad8ef83c490b94cb29ef01236205e360c2c4db200bb18"
     default))
 '(inhibit-startup-screen t)
 '(package-selected-packages
   '(markdown-mode
             markdown-ts-mode nord-theme sbt-mode scala-ts-mode
             terraform-mode))
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(eglot-highlight-symbol-face ((t (:background "color-227"))))
 '(flycheck-error ((t (:inherit error :background "color-196" :foreground "color-226" :underline t))))
 '(flycheck-warning ((t (:inherit warning :underline t :weight normal))))
 '(flymake-error ((t (:inherit error :background "color-196" :foreground "color-226"))))
 '(flymake-warning ((t (:inherit warning :weight normal))))
 '(font-lock-comment-face ((t (:background "color-231" :foreground "color-245" :inverse-video nil :slant normal))))
 '(font-lock-constant-face ((t (:foreground "cyan"))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face :background "color-231" :foreground "color-245"))))
 '(font-lock-function-name-face ((t (:foreground "color-93" :weight normal))))
 '(font-lock-keyword-face ((t (:foreground "black" :weight bold))))
 '(font-lock-number-face ((t (:foreground "color-88"))))
 '(font-lock-property-name-face ((t (:inherit font-lock-variable-name-face :foreground "black"))))
 '(font-lock-string-face ((t (:foreground "color-52" :slant normal))))
 '(font-lock-type-face ((t (:foreground "color-21" :weight normal))))
 '(font-lock-variable-name-face ((t (:foreground "color-33")))))
